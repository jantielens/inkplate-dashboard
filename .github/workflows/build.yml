name: Build Firmware

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      board:
        description: 'Board to build (inkplate5v2, inkplate10, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - inkplate5v2
          - inkplate10

jobs:
  prepare:
    name: Prepare build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set build matrix
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.board }}" = "all" ]; then
              echo 'matrix=["inkplate5v2","inkplate10"]' >> $GITHUB_OUTPUT
            else
              echo 'matrix=["${{ github.event.inputs.board }}"]' >> $GITHUB_OUTPUT
            fi
          else
            echo 'matrix=["inkplate5v2","inkplate10"]' >> $GITHUB_OUTPUT
          fi
  
  build:
    name: Build ${{ matrix.board }}
    runs-on: ubuntu-latest
    needs: prepare
    
    strategy:
      matrix:
        board: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Cache Arduino CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.arduino15/packages
            ~/.arduino15/staging
            ~/Arduino/libraries
          key: ${{ runner.os }}-arduino-cli-v2-${{ hashFiles('**/setup.ps1') }}
          restore-keys: |
            ${{ runner.os }}-arduino-cli-v2-
      
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/local/bin sh -s 1.3.1
          arduino-cli version
      
      - name: Install Arduino core and libraries
        run: |
          # Remove any existing config to start fresh
          rm -f ~/.arduino15/arduino-cli.yaml
          # Initialize config
          arduino-cli config init
          arduino-cli config set library.enable_unsafe_install true
          arduino-cli config add board_manager.additional_urls https://github.com/SolderedElectronics/Dasduino-Board-Definitions-for-Arduino-IDE/raw/master/package_Inkplate_Boards_index.json
          # Update indexes and install
          arduino-cli core update-index
          arduino-cli core install Inkplate_Boards:esp32
          arduino-cli lib install "Inkplate Library"
          arduino-cli lib install "PubSubClient"
      
      - name: Build firmware
        run: |
          chmod +x build.sh
          ./build.sh ${{ matrix.board }}
      
      - name: Get firmware size
        id: size
        run: |
          BIN_FILE="build/${{ matrix.board }}/${{ matrix.board }}.ino.bin"
          if [ -f "$BIN_FILE" ]; then
            SIZE=$(stat -f%z "$BIN_FILE" 2>/dev/null || stat -c%s "$BIN_FILE" 2>/dev/null)
            SIZE_MB=$(echo "scale=2; $SIZE / 1048576" | bc)
            echo "size=$SIZE" >> $GITHUB_OUTPUT
            echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
            echo "✅ Firmware size: ${SIZE_MB} MB (${SIZE} bytes)"
          else
            echo "❌ Firmware binary not found"
            exit 1
          fi
      
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}
          path: build/${{ matrix.board }}/${{ matrix.board }}.ino.bin
          retention-days: 30
      
      - name: Comment firmware size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const board = '${{ matrix.board }}';
            const size = '${{ steps.size.outputs.size }}';
            const sizeMb = '${{ steps.size.outputs.size_mb }}';
            
            const comment = `### 📦 Firmware Build: \`${board}\`
            
            ✅ Build successful!
            
            **Firmware Size:** ${sizeMb} MB (${size} bytes)
            
            Download artifact from the Actions run.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes(`Firmware Build: \`${board}\``)
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
